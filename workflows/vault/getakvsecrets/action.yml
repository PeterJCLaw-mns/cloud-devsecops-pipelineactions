name: 'Get Secrets from Azure key Vault'
description: 'Get Secrets from Azure key Vault'
inputs:
   
  sp_client_id:
    required: true
  sp_client_secret:
    required: true
  subscription_id:
    required: true
  # this is a spelling mistake and need to be removed. At this point waiting on INT team as they use it in many pipeline  
  tenent_id:
    required: true
  #tenant_id:
  #  required: true
  #  default: 'bd5c6713-7399-4b31-be79-78f2d078e543'
  keyvault:
    required: true
  secret_keys:
    required: false
  write_to_file:
    description: option to write the value to a file with the same name in /tmp/key_values
    required: false


runs:
  using: "composite"
  steps:
    
    - run : echo test $RUNNER_NAME $RUNNER_OS $RUNNER_ARCH $RUNNER_TEMP
      shell: bash
      
    - name: 'Deploy to Azure Webapp using Service Principal - by login to Azure'
      uses: azure/login@v1.4.6
      with:
        creds: '{"clientId": "${{ inputs.sp_client_id }}", "clientSecret": "${{ inputs.sp_client_secret }}", "subscriptionId": "${{ inputs.subscription_id }}", "tenantId": "${{ inputs.tenent_id }}"}'
      
    
    - name: get akv info
      run: |
         mkdir -p /tmp/akv_values
         
         IFS=, read -ra values <<< "${{inputs.secret_keys}}"
         for v in "${values[@]}"
         do
           keyValue=''
           if az keyvault secret list --vault-name "${{inputs.keyvault}}" --query "[].name" | grep $v
           then
              echo "Secret $v exists"
              keyValue=$(az keyvault secret show --name "$v" --vault-name "${{inputs.keyvault}}" --query "value" -o tsv)
              #echo "::add-mask::${keyValue}"        
           else 
              echo "Secret $v Does not exist"
           fi
           
           echo "masking the secret $v"
           while read -r line;
           do
            echo "::add-mask::${line}"
           done <<< $keyValue
           
           if [ ${{inputs.write_to_file}} == 'true' ]; then
            echo "values to /tmp/akv_values/${v}"
            echo "$keyValue" > "/tmp/akv_values/${v}"
           fi 
           
           echo "$v<<EOF" >> $GITHUB_ENV
           echo "$keyValue" >> $GITHUB_ENV
           echo "EOF" >> $GITHUB_ENV
           
         done
         
         az logout
         az cache purge
         az account clear
         
      shell: bash
      
      

   
